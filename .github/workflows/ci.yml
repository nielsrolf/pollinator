name: Test

on: 
  pull_request: {}
  push:
    branches: "**"
    tags: "*"

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies with pipenv
        run: |
          pip install ."[test]"
      - run: isort --diff .
      - run: black --check .
      - run: flake8

  docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      
      - name: Install cog
        run: |
          curl -o /usr/local/bin/cog -L https://github.com/replicate/cog/releases/latest/download/cog_`uname -s`_`uname -m`
          chmod +x /usr/local/bin/cog
      
      - name: Build cog test image
        run: cd test-cog-image && cog build -t no-gpu-test-image

      - name: Build docker image
        run: docker build . -t image:test
      
      - name: Run tests
        env:
          SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ID: ${{ secrets.SUPABASE_ID }}
        run: |
          mkdir -p /tmp/ipfs/output
          mkdir -p /tmp/ipfs/input
          docker run -v /var/run/docker.sock:/var/run/docker.sock --mount type=bind,source=/tmp/ipfs,target=/tmp/ipfs -e SUPABASE_API_KEY=$SUPABASE_API_KEY -e SUPABASE_URL=$SUPABASE_URL -e SUPABASE_ID=$SUPABASE_ID --network host image:test pytest -o log_cli=true test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create repository if it doesn't exist yet
        run: aws ecr describe-repositories --repository-names ${{ github.repository }} || aws ecr create-repository --repository-name ${{ github.repository }}

      - name: Setimage tag
        run: |
          if [[ $BRANCH == 'main' && $GITHUB_EVENT_NAME == 'push' ]]; then
              echo "IMAGE_TAG=main" >> "$GITHUB_ENV"
          else
              echo "IMAGE_TAG=dev" >> "$GITHUB_ENV"
          fi

      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: 614871946825.dkr.ecr.us-east-1.amazonaws.com #${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.repository }}
        run: |
          echo Tagging image as $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag image:test $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
